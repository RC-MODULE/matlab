-- Config for uISP aura-dbg firmware

local s = require("aura-simpleusb");

-- Methods always have 2 uint16_t args: wValue and wIndex
-- If they are not specified - they are set with 0
-- Methods are constructed with helpers
-- s:NONE - method called by a setup packet with no data
-- syntax: S:NONE(bRequest, "method_name", "A help string describing args")
-- s:READ - setup packet followed by arbitary format read from host. 
-- syntax: S:READ(bRequest, "method_name", 
--                          "A help string describing arguments",
--                          "A help string describing response",
--                          ...); --arbitaty number of args describing response format 
-- 
-- s:WRITE - setup packet followed by arbitary data written to device.
-- syntax: S:WRITE(bRequest, "method_name", 
--                          "A help string describing arguments",
--                          "String describing arguments, concatenated with first. For look-alike with READ",
--                          ...); --arbitaty number of args describing data to be written 


--10c4:ea60
device = 
{
   susb = s; --obligatory!
   vid = 0x16c0;
   pid = 0x05dc;
-- The vendor, product, serial strings are optional
-- A strict match is only required if they are set
--   vendor = "www.ncrmnt.org";
--   product = "tiny-pwr";
--   serial = "TransformaticMkI";
   methods = {
      s:READ(0x0, "get_message", 
	     "Doesn't have args", 
	     "Returns last message string from device", 
	     s.STR(128)), 
      s:NONE(0x1, "led", "Set the LED state"),
      s:NONE(0x2, "pwm_init", "period in uS"),
      s:NONE(0x3, "pwm_set", "channel (0, 1), high time in uS "),

--      s:READ(0x3, "read_hello", 
--	     "doesn't care for args", 
--	     "Returns a string with 'hello world'", 
--	     s.STR(16)),
--      s:WRITE(0x4, "write_hello", "nil, nil, string with hello-world", "", s.STR(16)),
   };
}

return device;
